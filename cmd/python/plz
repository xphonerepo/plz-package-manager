#!/usr/bin/env python

# This product is under the MIT license.
#
# Copyright (c) 2010,
#
# Ben Caldwell      http://twitter.com/lankzy
# Wei Zhuo          http://twitter.com/xwz
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# rev: $Id$

import inspect, sys, re, optparse

def install_action(packages, options={}):
    """
    Installs a list of packages.
    usage: plz install PACKAGES...

    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque id consectetur
    urna. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere 
    cubilia Curae; Morbi adipiscing congue massa a imperdiet. Integer et nulla 
    posuere urna lobortis rhoncus id convallis lacus.

    Valid options:
        -n [--dryrun]           : do a dry run install
        -q [--quiet]            : print nothing, or only summary information
        -b [--branch] ARG       : use packages from a specific branch
        --force                 : force operation to run
    """
    print options, packages

i_action = install_action

def help_action(action=None, options={}):
    """
    Display help information for an action.
    usage: plz help ACTION
    actions: %s
    """
    doc = help_doc(first(action))
    if len(doc) == 0:
        actions = sorted(a for (a,f) in available_actions() if len(a) > 1)
        doc = help_doc('help') % ", ".join(actions)
    print doc

def default_help():
    info = """
    usage: plz <command> [options] [args]
    Type 'plz help <command>' for help on a specific command.

    Available actions:
        %(actions)s
    
    plz is a simple package management system.
    For additional information, see http://getplz.com/
    rev: $Id$
    """
    names = []
    len_cmp = lambda x,y:len(y)-len(x)
    for alias in [sorted(a, len_cmp) for f,a in aliases().items()]:
        if len(alias) > 1:
            names.append("%s (%s)" % (alias[0], ", ".join(alias[1:])))
        else:
            names.append(alias[0])
    actions = "\n    ".join(sorted(names))
    return cleandoc(info) % locals()

def aliases():
    """Returns action function names, including aliases"""
    actions = dict()
    for a,f in available_actions():
        if f not in actions:
            actions[f] = []
        actions[f].append(a)
    return actions

def help_doc(action):
    """
    Returns the documentation for an action, empty if unknown action.
    """
    return cleandoc(dict(available_actions()).pop(action, None).__doc__ or "")

def cleandoc(doc):
    return re.compile("^ {4}", re.M).sub("", doc).strip()

def available_actions():
    return [(a[:-7], f) for (a,f) in globals().items() 
                if type(f).__name__ == 'function' and a[-7:] == '_action']

def get_options(action):
    """
    Extract action options from action function doc. Returns OptionParser.
    
    Action can specify in the docstring a list of optional arguments
    that will be processed and passed as the options argument to the action function.

    The following formats are allowed:

        -n [--name] ARG         : short/long value options
        -n [--name]             : short/long boolean option
        --name ARG              : long value option
        --name                  : long boolean option
    
    The ARG denotes that the option can take a value, otherwise boolean options.

    The following formats are NOT supported: 
    (short options must be an alternative to the long option)

        -n                      : short boolean option
        -n ARG                  : short value option
    """
    doc = help_doc(action)
    pattern = "^\s*(-{1,2}(\w+))(?:\s+\[(--(\w+))\])?\s*(\w+)?\s*:"
    options = [filter(lambda x:len(x)>1, p) for p in re.findall(pattern, doc, re.M)]
    usage = re.findall("^(usage: .*)$", doc, re.M) or ["usage: plz <command>"]
    parser = optparse.OptionParser(usage=usage[0], conflict_handler="resolve")
    for opt in options:
        if opt[-1] == 'ARG':
            parser.add_option(*opt[:-2], **dict(dest=opt[-2]))
        else:
            parser.add_option(*opt[:-1], **dict(dest=opt[-1], action="store_true"))
    return parser

def min_args(func):
    """Returns minimum number of required arguments of the function."""
    spec = inspect.getargspec(func)
    return len(spec[0]) - len(spec[3]) 

def first(val):
    """Returns 1st element of a list, None otherwise"""
    if hasattr(val, '__getitem__') and len(val) > 0:
        return val[0]
    else:
        return None

def dispatch(argv):
    """
    Calls action functions with list of values and options dict.
    
    All action functions must accept 2 arguments, first a list
    of input argument values, and second an options dictionary.

    The action function's first argument may be optional, otherwise
    the user must provide at least one input argument value.
    """
    func = dict(available_actions()).pop(argv[1],None)
    parser = get_options(argv[1])
    if func:
        options, args = parser.parse_args(argv[2:])
        if len(args) >= min_args(func):
            func(args, options)
        else:
            action = first([a for a in aliases().pop(func) if len(a)>2])
            parser.error("command '%s' requires an argument" % action)
    else:
        parser.error("Unknown command '%s'" % argv[1])

if __name__ == "__main__":
    if len(sys.argv) > 1:
        dispatch(sys.argv)
    else:
        print default_help()
